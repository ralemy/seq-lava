from util import log, KM, REF_KMER, SNP_KMER
from util import encode_position, decode_position
from util import save_pickle


MAX_AMBIG=10

class MER_COUNTER:
    unambig: int
    unique_ambig: int
    total_ambig: int
    overflow: int
    def __init__(self:MER_COUNTER, unambig: int, unique_ambig: int, total_ambig: int, overflow: int):
        self.unambig = unambig
        self.unique_ambig = unique_ambig
        self.total_ambig = total_ambig
        self.overflow = overflow

class SNP:
    kmer_len: int
    chromosome: str
    index: int
    count_field: int
    ref_base: str
    ref_base2: str
    snp_type: str
    strand: str
    alt_field: str
    alleles: list[str]
    freqs: list[int]
    valid: bool
    def __init__(self:SNP, line: str):
        lines = line.split('\t')
        self.valid = False
        self.kmer_len = KM.len()
        self.chromosome = lines[1]
        self.index = int(lines[2])
        self.strand = lines[6]
        self.ref_base = lines[7].upper()
        self.ref_base2 = lines[8].upper()
        self.alt_field = lines[9]
        self.snp_type = lines[11]
        if not self.is_valid():
            log ('dropped invalid line \n' + line)
            return
        if  lines[21] != '2':
            return
        self.count_field = int(lines[21])
        self.alleles = self.set_alleles(lines[22].split(','))
        self.freqs = self.set_freqs(lines[24].split(','))
        if self.strand not in '-+':
            raise ValueError('Strand should be + or - :' + line)
        if (self.alleles[0] == self.ref_base or self.alleles[1] == self.ref_base):
            self.valid = True

    def set_freqs(self:SNP, freqs = list[float]):
        if self.alleles[1] == self.ref_base:
            tmp = freqs[0]
            freqs[0] = freqs[1]
            freqs[1] = tmp
        return [int(float(f) * 255) for f in freqs if f != '']

    def complement(self:SNP, allele: str):
        match allele:
            case 'A': return 'T'
            case 'C': return 'G'
            case 'G': return 'C'
            case 'T': return 'A'
            case _: return 'N'

    def set_alleles(self: SNP, alleles: list[str]) -> list[str]:
        if self.strand == '-':
            alleles[0] = self.complement(alleles[0])
            alleles[1] = self.complement(alleles[1])
        return [l.strip() for l in alleles if l.strip() != '']

    def is_valid(self:SNP):
        return self.ref_base in 'ACGT' and \
        self.index >= self.kmer_len - 1  and \
        self.snp_type == 'single' and \
        self.ref_base == self.ref_base2 and \
        len(self.ref_base) == len(self.ref_base2) == 1

    def __str__(self:SNP):
        return 'Chromosome: ' + self.chromosome + \
                ' ('+ self.strand + str(self.index) +') ' + \
                self.snp_type + ': ' + self.ref_base + \
                ', ' + self.ref_base2 + \
                ' ' + self.alt_field + \
                ': ' + str(self.alleles) + \
                '('+str(self.freqs)+')' + '\n' + self.line

    def generate_kmers(self:SNP, s: str, alt: str, kmers: list[SNP_KMER], read_idx: int):
        t = [c for c in s]
        t[self.kmer_len -1] = alt[0]
        base = s[self.kmer_len-1]
        p = ''.join(t).upper()
        for snp_pos, snp in seq(p).kmers_with_pos[KM]():
            pos = self.kmer_len - 1 - snp_pos
            counter = read_idx + self.index - pos
            encoded_pos = encode_position(pos, base, alt)
            kmer = int(snp.as_int())
            kmers.append(SNP_KMER(kmer, counter, encoded_pos , self.freqs[0], self.freqs[1],0))

    def get_kmers(self:SNP, ref:seq, kmers: list[SNP_KMER], read_idx: int):
        s = str(ref[self.index-self.kmer_len+1: self.index+self.kmer_len]).upper()
        base = s[self.kmer_len-1]
        if base != self.ref_base:
            raise ValueError('Mismatch found between reference sequence and SNP file ' + self.chromosome + ' / ' + str(self.index) + ' expected: ' + self.ref_base + ' actual: ' + base )
        for i in self.alt_field:
            if self.strand == '-':
                i = self.complement(i)
            if i != self.ref_base and i in 'ACGT':
                self.generate_kmers(s, i, kmers, read_idx)

def initialize_snp_dict(snp_filename: str) -> dict[str,list[SNP]]:
    with open(snp_filename, 'r') as snp_file:
        snp_dict = dict[str,list[SNP]]()
        for line in snp_file:
            if line[0] != '#' and line[0] != '\n':
                snp = SNP(line)
                if snp.valid:
                    if snp.chromosome not in snp_dict:
                        snp_dict[snp.chromosome] = list[SNP]()
                    snp_dict[snp.chromosome].append(snp)
        return snp_dict


class CrossRef:
    snp_tmp: dict[int,list[SNP_KMER]]
    ref_tmp: dict[int, list[REF_KMER]]
    chromosomes: list[tuple[str,int]]
    ref_seqs: list[seq]
    read_idx: int

    def alloc_snp_array(self:CrossRef, snp_dict:dict[str,list[SNP]]):
        snp_kmer_count = 0
        for k, snp_list in snp_dict.items():
            snp_kmer_count += len(snp_list)
        snp_kmer_count *= 32
        self.snp_tmp = dict[int,list[SNP_KMER]]()
        self.snp_tmp[0]= list[SNP_KMER](snp_kmer_count)

    def ref_kmer_array(self:CrossRef):
        self.ref_tmp[0] = list[REF_KMER](self.read_idx)
        sz = len(self.chromosomes) - 1
        offset = self.read_idx
        for i in range(sz + 1):
            sq = self.ref_seqs.pop(sz-i)
            offset -= self.chromosomes[sz-i][1]
            for position, kmer in sq.kmers_with_pos[KM]():
                if (offset + position) % 100000000 == 0:
                    log("kmers for " + self.chromosomes[sz-i][0] + ' at position ' + str(offset + position))
                self.ref_tmp[0].append(REF_KMER(int(kmer.as_int()), offset + position, 0))

    def get_kmers(self: CrossRef, ref:seq, snps:list[SNP], read_idx:int):
        for snp in snps:
            snp.get_kmers(ref, self.snp_tmp[0], read_idx)

    def __init__(self: CrossRef, ref_file: str, snp_dict: dict[str, list[SNP]]):
        self.alloc_snp_array(snp_dict)
        self.chromosomes = list[tuple[str,int]]()
        self.ref_seqs = list[seq]()
        self.ref_tmp = dict[int, list[REF_KMER]]()
        read_idx = 0
        for read in FASTA(ref_file, fai=False):
            seq_size = len(read.seq)
            self.chromosomes.append((read.name, seq_size))
            self.ref_seqs.append(read.seq)
            if read.name in snp_dict:
                 log('..... processing ' + read.name)
                 self.get_kmers(read.seq, snp_dict[read.name], read_idx)
            else:
                 log('..... skipping ' + read.name)
            read_idx += seq_size
            pass
        self.read_idx = read_idx



def increment(c:MER_COUNTER, repeat: int):
    if repeat == 0:
        c.unambig += 1
    else:
        c.unique_ambig+=1
        c.total_ambig += repeat+1
        c.overflow += (1 if repeat > MAX_AMBIG else 0)

# def commit_ref(ref: REF_KMER, repeat: int, kmers: list[REF_KMER], c: MER_COUNTER):
#     kmers.append(REF_KMER(ref.kmer, ref.index, repeat))
#     increment(c,repeat)

def commit[T](mer: T, repeat: int, c: MER_COUNTER, kfile:File, ambig_file:File, ambig:list[T]):
    kfile.write(mer.serialize(repeat) + '\n')
    if repeat > 0:
        ambig_file.write(str(mer.kmer) + '|' + str([am.serialize_ambig for am in ambig]) + '\n')
    increment(c,repeat)

def commit_snp(ref: SNP_KMER, repeat: int, kmers: list[SNP_KMER], c: MER_COUNTER):
    kmers.append(SNP_KMER(ref.kmer, ref.index,ref.pos, ref.ref_freq, ref.alt_freq, repeat))
    increment(c,repeat)

def report_mer_counters(total_kmers: int, counters:MER_COUNTER):
    print 'total', total_kmers
    print 'unambig', counters.unambig
    print 'ambig-unique', counters.unique_ambig
    print 'total_ambig', counters.total_ambig
    print 'overflow', counters.overflow


def dict_factory[T](array: list[T],
    out_file: str,
    init_mer:T):
    total_kmers = 0
    counters=MER_COUNTER(0,0,0,0)
    last_mer = init_mer
    last_repeat = -1
    with open(out_file + '.txt', 'w') as kfile:
        with open(out_file+ '_ambig.txt', 'w') as ambig_file:
            ambig = list[T]()
            for mer in array:
                ambig = list[T]()
                total_kmers += 1
                if last_repeat == -1:
                    last_mer = mer
                    last_repeat = 0
                elif mer.kmer != last_mer.kmer:
                    commit(last_mer, last_repeat, counters, kfile, ambig_file, ambig)
                    last_mer = mer
                    last_repeat = 0
                elif last_repeat == 0:
                    ambig.append(last_mer)
                    last_ref = mer
                    last_repeat = 1
                else:
                    if len(ambig) < MAX_AMBIG:
                        ambig.append(last_mer)
                    last_ref = mer
                    last_repeat += 1
            commit(last_mer, last_repeat, counters, kfile, ambig_file, ambig)
    report_mer_counters(total_kmers, counters)

# def old_dict_factory[T](array: list[T],
#     out_file: str,
#     init_mer:T,
#     commitfn: function[void,T,int,list[T],MER_COUNTER]) -> tuple[list[T], dict[int, list[T]]]:
#     total_kmers = 0
#     counters=MER_COUNTER(0,0,0,0)
#     last_mer = init_mer
#     last_repeat = -1
#     ambig = dict[int, list[T]]()
#     kmers = list[T](len(array))
#     for mer in array:
#         total_kmers += 1
#         if last_repeat == -1:
#             last_mer = mer
#             last_repeat = 0
#         elif mer.kmer != last_mer.kmer:
#             commitfn(last_mer, last_repeat, kmers, counters)
#             last_mer = mer
#             last_repeat = 0
#         elif last_repeat == 0:
#             ambig[mer.kmer] = [last_mer]
#             last_ref = mer
#             last_repeat = 1
#         else:
#             if len(ambig[mer.kmer]) < MAX_AMBIG:
#                 ambig[mer.kmer].append(last_mer)
#             last_ref = mer
#             last_repeat += 1
#     commitfn(last_mer, last_repeat, kmers, counters)
#     report_mer_counters(total_kmers, counters)
#     return(kmers,ambig)

def sort_array[T](arr: list[T]) -> list[T]:
    def sortfn(left:T):
        return left.kmer
    sz = len(arr)
    log('unsorted: ' +str(sz)+ str([arr[0], arr[sz//2], arr[sz-1]]))

    arr.sort(key = sortfn, algorithm='pdq' )
    log('unsorted: ' +str(sz)+ str([arr[0], arr[sz//2], arr[sz-1]]))
    return arr

def save_array[T](arr:list[T], ambig:dict[int,list[T]], out_file: str):
    log ('saving kmer array')
    save_pickle(arr, out_file)
    log ('saving ambig array')
    save_pickle(ambig, out_file + '_ambig')


def prep(snp_filename: str, ref_filename: str, snp_out: str, ref_out: str):
    log('SNP dictionary Initializing ..........')

    snp_dict = initialize_snp_dict(snp_filename)

    log('SNP dictionary Initialized.')

    cross = CrossRef(ref_filename, snp_dict)
    log ('Cross Reference completed, sorting arrays')

    cross.snp_tmp[0] = sort_array(cross.snp_tmp[0])
    log ('SNP sorted............... Building dictionary')
    dict_factory(cross.snp_tmp[0], snp_out, SNP_KMER(-1,-1,-1,-1,-1,-1))

    log ('building REF array')
    cross.ref_kmer_array()
    log ('sorting REF array')
    cross.ref_tmp[0] = sort_array(cross.ref_tmp[0])

    log ('REF Sorted.............. building dictionaries')
    dict_factory(cross.ref_tmp[0], ref_out, REF_KMER(-1,-1,-1))

    # save_array(cross.snp_tmp[0], snp_ambig, snp_out)
    # save_array(cross.ref_tmp[0], ref_ambig, ref_out)

    log ('saving chromosome names file')
    save_pickle(cross.chromosomes, ref_out + '_chromosomes')
    log ('Operation Complete')
